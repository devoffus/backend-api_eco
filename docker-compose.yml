version: '3.8'

services:
  app:
    build: .
    ports:
      - "5000:5000" # HTTP API
      - "1935:1935" # RTMP
      - "8000:8000" # HLS/DASH
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - CASSANDRA_HOST=${CASSANDRA_HOST}
      - CASSANDRA_DATACENTER=${CASSANDRA_DATACENTER}
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      postgres:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    user: "1001"

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/db/postgresql-schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  cassandra:
    image: cassandra:4.1
    environment:
      - CASSANDRA_CLUSTER_NAME=ecommerce_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_KEYSPACE=ecommerce_analytics
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
      - CASSANDRA_NUM_TOKENS=16
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    ports:
      - "9042:9042"
      - "7000:7000" # internode communication
      - "7001:7001" # TLS internode
      - "7199:7199" # JMX
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./src/db/cassandra-schema.cql:/docker-entrypoint-initdb.d/init.cql
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -u cassandra -p cassandra -e 'DESCRIBE KEYSPACES' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    command: ["/bin/sh", "-c", "while ! nc -z app 5000; do sleep 1; done && nginx -g 'daemon off;'"]

volumes:
  postgres_data:
  cassandra_data:
  redis_data:
  app_logs: